creat react project

npm create vite@latest

npm i bootstrap@5.2.3
npm i react-icons@4.7.1
npm i immer@9.0.19
import produce from immer
npm i react-hook-form@7.43
npm i zod@3.20.6 
npm i @hookform/resolvers@2.9.11
npm i axios@1.3.4
in main.tsx
import 'bootstrap/dist/css/bootstrap.css'

https://jsonplaceholder.typicode.com/

interface Props {
  items: string[];
  heading: string;
  onSelectItem: (item: string) => void;
}
function ListGroup({ items, heading }: Props) {
  const [clickedIndex, setClickedIndex] = useState(-1);

}


const onSelectItem = (item: string) => console.log(item);

ES7+
rafce

interface Props {
  children: ReactNode;
}

<Alert>
      <div className="alert alert-primary" role="alert">
        Hello World
      </div>
    </Alert>

    

const StateUpdateArray = () => {
  const [tags, setTags] = useState(["apple", "orange"]);

  const onClick = () => {
    // adding
    setTags([...tags, "banane"]);
    // removing
    setTags(tags.filter((tag) => tag !== "apple"));
    // updateing
    setTags(tags.map((tag) => (tag === "apple" ? "banane" : tag)));
  };

  return <div>StateUpdateArray</div>;
};

div.mb-3>label.form-label+input.form-control




const Form = () => {
  const nameRef = useRef<HTMLInputElement>(null);
  const ageRef = useRef<HTMLInputElement>(null);
  const person = { name: "", age: 10 };
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();

    if (nameRef.current) person.name = nameRef.current.value;
    if (ageRef.current) person.age = parseInt(ageRef.current.value);
    console.log(person);
  };
  return (
    <form action="#" onSubmit={handleSubmit}>
      <div className="mb-3">
        <label htmlFor="name" className="form-lable">
          Name
        </label>
        <input
          ref={nameRef}
          id="name"
          type="text"
          name="name"
          className="form-control"
        />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          ref={ageRef}
          type="number"
          name="age"
          id="age"
          className="form-control"
        />
      </div>
      <button type="submit" className="btn btn-success">
        Submit
      </button>
    </form>
  );
};



const FormSecond = () => {
  const [person, setPerson] = useState({ name: "", age: "" });
  const handleSubmit = (event: FormEvent) => {
    event.preventDefault();

    console.log(person);
  };
  return (
    <form action="#" onSubmit={handleSubmit}>
      <div className="mb-3">
        <label htmlFor="name" className="form-lable">
          Name
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, name: event.target.value })
          }
          value={person.name}
          id="name"
          type="text"
          name="name"
          className="form-control"
        />
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          onChange={(event) =>
            setPerson({ ...person, age: event.target.value })
          }
          value={person.age}
          type="number"
          name="age"
          id="age"
          className="form-control"
        />
      </div>
      <button type="submit" className="btn btn-success">
        Submit
      </button>
    </form>
  );
};

export default FormSecond;

npm i react-hook-form@7.43


import { FieldValues, useForm } from "react-hook-form";
interface FormData {
  name: string;
  age: number;
}
const FormThird = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>();
  const onSubmit = (data: FieldValues) => {
    console.log({ ...register("name") });
    console.log(data);
  };
  return (
    <form action="#" onSubmit={handleSubmit(onSubmit)}>
      <div className="mb-3">
        <label htmlFor="name" className="form-lable">
          Name
        </label>
        <input
          {...register("name", { required: true, minLength: 3 })}
          id="name"
          type="text"
          name="name"
          className="form-control"
        />
        {errors.name?.type == "required" ? (
          <p className="text-danger">Name is required</p>
        ) : null}
        {errors.name?.type == "minLength" ? (
          <p className="text-danger">Type ate least 3 character</p>
        ) : null}
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          {...register("age", { min: 18, required: true })}
          type="number"
          name="age"
          id="age"
          className="form-control"
        />
        {errors.age?.type == "min" ? (
          <p className="text-danger">Age should be more than 18</p>
        ) : null}
      </div>
      <button type="submit" className="btn btn-success">
        Submit
      </button>
    </form>
  );
};

export default FormThird;

npm i zod@3.20.6 

import { FieldValues, useForm } from "react-hook-form";
import { z } from "zod";
import { zodResolver } from "@hookform/resolvers/zod";

const schema = z.object({
  name: z.string().min(3, { message: "Type at least 3 character" }),
  age: z
    .number({ invalid_type_error: "Age field is required" })
    .min(18, { message: "Age must be at least 18" }),
});

type FormData = z.infer<typeof schema>;

const FormFourth = () => {
  const {
    register,
    handleSubmit,
    formState: { errors },
  } = useForm<FormData>({ resolver: zodResolver(schema) });
  const onSubmit = (data: FieldValues) => {
    console.log({ ...register("name") });
    console.log(data);
  };
  return (
    <form action="#" onSubmit={handleSubmit(onSubmit)}>
      <div className="mb-3">
        <label htmlFor="name" className="form-lable">
          Name
        </label>
        <input
          {...register("name", { required: true, minLength: 3 })}
          id="name"
          type="text"
          name="name"
          className="form-control"
        />
        {errors.name && <p className="text-danger">{errors.name.message}</p>}
      </div>
      <div className="mb-3">
        <label htmlFor="age" className="form-label">
          Age
        </label>
        <input
          {...register("age", { min: 18, required: true, valueAsNumber: true })}
          type="number"
          name="age"
          id="age"
          className="form-control"
        />
        {errors.age && <p className="text-danger">{errors.age.message}</p>}
      </div>
      <button type="submit" className="btn btn-success">
        Submit
      </button>
    </form>
  );
};

export default FormFourth;



    